{{- .AddToImports "bytes" -}}
{{- .AddToImports "strconv" -}}
{{- .AddToImports "fmt" -}}
{{- .AddToImports "strings" -}}
package {{.PackageInfo.Name}}
{{ if .Imports }}
import (
	{{range .Imports -}}
	"{{ . }}"
	{{end -}}
)
{{- end}}
{{ define "Stringer" }}
	{{ with .T -}}
		{{- if .IsArray -}}
			// Stringer implementation for {{ .Name }}
			func (st {{ .Name }}) String() string {
				var sb strings.Builder
				for _, el := range st {
					sb.WriteString("{{.Kind}}:\n"+fmt.Sprintf("%s", el))
					{{ $name := concat "Stringer" .Kind }}
					{{- if not ($.D.HasInStore $name) }}
						{{- if includeAndStore "Stringer" .Kind $name -}}{{end -}}
					{{end -}}
				}
				return sb.String()
			}
		{{- else }}
			// Stringer implementation for {{ .Kind}}
			func (st {{ .Kind }}) String() string {
				var sb strings.Builder
				{{- $package := .Package }}
				{{- if sort .Fields -}}{{- end -}}
				{{- range .Fields }}
					{{- if .IsExported }}
						{{- $imported := .IsImported -}}
						{{- $fieldName := .Name -}}
						{{- $name := concat "Stringer" .Name -}}
						{{- if or .IsStruct .IsArray}}
							{{- if .IsPointer }}
								if st.{{$fieldName}} != nil {
							{{end -}}
							{{- if .IsBasic }}
								// basic `{{ $fieldName }}` of type `{{ .Kind }}`
							{{- else if .IsEmbedded }}
								// embed of {{ if .IsPointer }} `*{{ .Kind }}` {{ else }}  `{{ .Kind }}` {{end -}}
							{{- else }}
								// {{ if .IsStruct}}struct{{else}}array{{end }} of {{ if .IsPointer }} `*{{ .Kind }}` {{ else }}  `{{ .Kind }}` {{end -}}
								{{- if $imported }}
									{{ $.D.AddToImports .PackagePath }} // external package {{.Package}}.{{.Name}} -> {{.PackagePath}}
								{{ else }}
									{{- if not ($.D.HasInStore $name) }}
										{{- if includeAndStore "Stringer" .Kind $name -}}{{end -}}
									{{end }}
									sb.WriteString("{{$fieldName}}:\n"+fmt.Sprintf("%s", st.{{$fieldName}}))
								{{end -}}
							{{end -}}
							{{- if .IsPointer }}
								}
							{{end -}}
						{{- else if .IsBasic -}}
							{{- if .IsPointer}}
								if st.{{$fieldName}} != nil{
							{{end -}}
							{{- if .IsBool }}
								sb.WriteString("{{$fieldName}}="+strconv.FormatBool(st.{{$fieldName}})+"\n")
							{{- else if .IsFloat }}
								sb.WriteString("{{$fieldName}}="+fmt.Sprintf("%0.f", st.{{$fieldName}})+"\n")
							{{- else if .IsString }}
								sb.WriteString("{{$fieldName}}="+st.{{$fieldName}}+"\n")
							{{- else if .IsUint }}
								sb.WriteString("{{$fieldName}}="+strconv.FormatUint(st.{{$fieldName}}, 10)+"\n")
							{{- else if .IsInt }}
								sb.WriteString("{{$fieldName}}="+strconv.Itoa(st.{{$fieldName}})+"\n")
							{{- else }}
								// unhandled basic field typed {{.Kind}}
							{{end }}
							{{- if .IsPointer }}
								}
							{{ end -}}
						{{ end -}}
					{{ end -}}
				{{ end }}
				return sb.String()
			}
		{{- end -}}
	{{- end -}}
{{- end -}}
{{- if .Store (concat "Stringer" .Main.T.Name) "" }} {{end -}}
{{- template "Stringer" .Main -}}

{{- range $key, $value := .Keeper }}
	{{ if hasPrefix $key "Stringer" }}{{$value}}{{ else }} $key {{end}}
{{end -}}